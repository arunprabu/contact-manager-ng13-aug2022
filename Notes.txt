Angular Building Blocks 
--  

  Components
  Directives 
  Services

  Interfaces
  Models/Classes

  Pipes 
  Guards
  Modules 
  Interceptor


Concepts
--
  Data Binding 
  Routing 
    Nested Routing 
  Lifecycle Hooks 
  RxJS
  Any to Any Comp 

  Lazy Loading Modules 

  Unit Testing in Angular 

--
 NgRx 
 --
  


Folder Structure - Feature-wise and Building Block Wise 
--
  src/
    app/
      ...
      ...
      ...
      ... 
      shared/
        components/
          header/
            ...
            ...
            ...
            ...
          footer/
            ...
            ...
          menu/
            ...
            ...
            ...
      home/
      concepts/
        components/
          ...
          ...
          ...
        directives/
          ...
          ...
      contacts/
        components/
          ...
          ...
          ...
        services/
          ...
          ...
        models/
          ...
      about/
      
---
ViewEncapsulation
---

Routing 
--
  SPA Characteristics (7)
  --
    1. Page should not refresh / reload [DONE]
    2. URL should change [DONE]
    3. History should be maintained w/o page refresh [DONE]
    4. Header and Footer should be intact. Should not be loaded again n again [DONE]
    5. In between header and footer - page should be updated [DONE]
    6. Active menu should be set [TODO]
    7. Page Title should be changed [TODO]

  Step 0:
  ---
    Identifying the URLs and components 
      Home (HomeComponent)                - localhost:4200/           
      Concepts (ConceptsComponent)        - localhost:4200/concepts
      Contact Mgr (ContactsComponent)     - localhost:4200/contacts
      Unit Testing (UnitTestingDemoComp)  - localhost:4200/contacts
      Products (ProductsComponent)        - localhost:4200/products
      About  (AboutComponent)             - localhost:4200/about 

    Step 1:
    --  
      Let's setup the URLs in menu comp.html 

    Step 2: 
    --
      Check the app. URL is not stable. LEt's fix it. 

      Let's create the components for the URLs 
        ng g c home -t -s 
        ng g c concepts -s 
        ng g c contacts -s 
        ng g c about -s 

    Step 3
    --
      We need to config the URLs in app-routing.module.ts 

      const routes: Routes = [
        { path: '', component: HomeComponent },
        { path: 'concepts', component: ConceptsComponent },
        { path: 'contacts', component: ContactsComponent },
        { path: 'about', component: AboutComponent }
      ];

    Step 4:
    --
      Let's load the comp in between header and footer
      in app.comp.html, add <router-outlet></router-outlet> 

    Step 5: 
    --
      Check the app. Page is still getting reloaded. Let's fix it. 

      change all href to routerLink in menu.comp.html 

    That's all. 
    -- 


Data Binding 
---
  TS => HTML 

  1. Interpolation 
      {{}}
      TS => HTML 
  
  2. Property Binding 
      []
      TS => HTML 
        [value]="appName"
        Class Binding 
          <div [ngClass]="{}">
        
        Style Binding
          <div [ngStyle]="{}">

  3. Event Binding 
      ()
      TS <= HTML 

  4. Two way Binding 
      [(ngModel)] 
      TS <=> HTML 
      Note: you need form elements such as input, textarea, select

  5. Custom Property Binding [DONE]

  6. Custom Event Binding


--

Cross Component Communication
--
  1. Parent to Child Component Communication
      Using Custom Property Binding 

  2. Child to Parent Component Communication
      2.1 Using Custom Event Binding 
      2.2 Using @ViewChild() //TODO:

  3. Any to Any Component Communication
      3.1 Using RxJs/Observables 
      3.2 Using NgRx (framework) = Redux Concepts + RxJS + Ng 
      3.3 Using Redux (Not Recommended)

Forms in Angular
--
  1. Template-Driven Forms 
      * Made with templates (html)
      * Easiest type of Form
      * For validations - directives can be used

      Disadvantages
      * Not suitable for complex form validations
      * Not suitable for Unit Testing 

      available in FormsModule of @angular/forms


  2. Reactive Forms / Data-Driven Forms (Recommended)
      * Made with templates (html) + TS
      * Easy type of Form

      Advantages:
      * suitable for complex form validations
      * suitable for Unit Testing 

      available in ReactiveFormsModule of @angular/forms


---
Interfaces, Classes, Models Example
---
// custom data type
export interface IUser{ 
    name: string;
    city: string;
}

// app-wide dep Injectable util class 
// ng g cl contacts/utils/user 
@Injectable({
    providedIn: 'root'
})
class User{

    findLastUser(){
        
    }

    getLastLoginTime(){

    }
}

class MyComp {

    userData: IUser = { // custom type 
        name: 'John',
        city: "London",
    }
    
    constructor(private myUser: User){ // dep inj 
        this.myUser.findLastUser();//method from util class
    }
    
}
======




--
Agenda


Friday, Monday
-- 
  Any to Any Comp 
  Unit Testing (2 Days)

Tuesday
--
  Pipes
  Guards
  Interceptor
  Authentication 
  Build & Deployment
  Lazy Loading Modules 

Wednesday
--
  NgRx 
  D-Day 




